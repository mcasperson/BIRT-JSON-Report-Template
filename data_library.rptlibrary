<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="http://www.eclipse.org/birt/2005/design" version="3.2.23" id="1">
    <property name="createdBy">Eclipse BIRT Designer Version 4.2.1.v201209101448 Build &lt;4.2.1.v20120912-1721></property>
    <property name="units">in</property>
    <property name="theme">defaultTheme</property>
    <data-sources>
        <script-data-source name="By Query" id="8">
            <method name="open"><![CDATA[Packages.java.lang.System.out.println("[START] PressGang CCMS REST Data Source - open");

/* Add the ability to search an array */

Array.prototype.customIndexOf = function(item) {    

    for(var i = 0; i < this.length; ++i) {
    
        if(this[i] == item) {
            return i;
        }
    }
    return -1;
};

/*
	Globals used by other scripts
*/

// This will track your current row later on
totalCount = 0;

/*
	Perform REST query
*/

try
{
	// Create instance of the Controller class
	controller = new Packages.com.actuate.json.JSONParser();
	
	// Load the JSON Source
	controller.loadData(params["JSONURL"]);
	
	// Calculate the total rows we will have
	totalCount = controller.getChildCount("items");
}
catch (exception)
{
	Packages.java.lang.System.out.println("An exception was thrown: " + exception);
	Packages.java.lang.System.out.println("Make sure the JSONParser class is available in the class path");
}
finally
{
	Packages.java.lang.System.out.println("[END] PressGang CCMS REST Data Source - open");
}]]></method>
        </script-data-source>
        <script-data-source name="By Specs" id="202">
            <method name="open"><![CDATA[/*
	This data source make use of the custom JSONParser class to peform a request of
	the CCMS REST API using the URL saved in the JSONURL parameter. It will then parse
	the result, the details of which can then be extracted by the Data Sets.
*/

Packages.java.lang.System.out.println("[START] By Specs - open");

/* Add the ability to search an array */

Array.prototype.customIndexOf = function(item) {    

    for(var i = 0; i < this.length; ++i) {
    
        if(this[i] == item) {
            return i;
        }
    }
    return -1;
};

/*
	Globals used by other scripts
*/
var restUrl = "http://skynet.usersys.redhat.com:8080/TopicIndex/seam/resource/rest/1/topics/get/json/";
var restExpansion = "?expand=%7B%22branches%22%3A%5B%7B%22trunk%22%3A%7B%22name%22%3A%22topics%22%7D%2C%22branches%22%3A%5B%7B%22trunk%22%3A%7B%22name%22%3A%22tags%22%7D%7D%5D%7D%5D%7D";
var categoryRestUrl = "http://skynet.usersys.redhat.com:8080/TopicIndex/seam/resource/rest/1/category/get/json/";
//var categoryRestExpansion = "?expand=%7B%22branches%22%3A%5B%7B%22trunk%22%3A%7B%22name%22%3A%22categories%22%7D%2C%22branches%22%3A%5B%7B%22trunk%22%3A%7B%22name%22%3A%22tags%22%7D%7D%5D%7D%5D%7D";
var categoryRestExpansion = "?expand=%7B%22branches%22%3A%5B%7B%22trunk%22%3A%7B%22name%22%3A%22tags%22%7D%7D%5D%7D";
var categoryListRestUrl = "http://skynet.usersys.redhat.com:8080/TopicIndex/seam/resource/rest/1/categories/get/json/all";
var categoryListRestExpansion = "?expand=%7B%22branches%22%3A%5B%7B%22trunk%22%3A%7B%22name%22%3A%22categories%22%7D%7D%5D%7D"
// The controllers holds the JSON results
controllers = [];
// The CSPIDs that were used to create the controllers
controllerCSPIDs = [];
// The controller that holds the category details
categoryController = null;
// The controller that contains the list of categories
categoryListController = null;

/*
	Processing
*/
(function()
{
	try
	{
		Packages.java.lang.System.out.println("Category List REST URL: " + categoryListRestUrl + categoryListRestExpansion);
		categoryListController = new Packages.com.actuate.json.JSONParser();
		categoryListController.loadData(categoryListRestUrl + categoryListRestExpansion);
		
		var category = params["Category"];
		if (category != null &amp;&amp; category.length != 0 &amp;&amp; category != "-1")
		{
			var completeCategoriesRestUrl = categoryRestUrl + category + categoryRestExpansion;
			Packages.java.lang.System.out.println("Category REST URL: " + completeCategoriesRestUrl);
			categoryController = new Packages.com.actuate.json.JSONParser();
			categoryController.loadData(completeCategoriesRestUrl);
		}
		
		var cspIds = params["CSPIDS"];
		if (cspIds != null)
		{
			var cspIdsArray = cspIds.split(",");
			
			for (var cspIndex = 0; cspIndex < cspIdsArray.length; ++cspIndex)
			{
				var csp = parseInt(cspIdsArray[cspIndex]);
				if (csp != NaN)
				{
					var completeRestUrl = restUrl + "query;topicIncludedInSpec=" + csp + restExpansion;
					
					Packages.java.lang.System.out.println("REST URL: " + completeRestUrl);
					
					// Create instance of the Controller class
					var controller = new Packages.com.actuate.json.JSONParser();
					
					// Load the JSON Source
					controller.loadData(completeRestUrl);
					
					// save the controller
					controllers.push(controller);
					
					// save the csp ID
					controllerCSPIDs.push(csp);
				}
			}
		}
	}
	catch (exception)
	{
		Packages.java.lang.System.out.println("An exception was thrown: " + exception);
		Packages.java.lang.System.out.println("Make sure the JSONParser class is available in the class path");
	}
	finally
	{
		Packages.java.lang.System.out.println("[END] By Specs - open");
	}
})();]]></method>
        </script-data-source>
    </data-sources>
    <data-sets>
        <script-data-set name="TagSummary" id="84">
            <list-property name="resultSetHints">
                <structure>
                    <property name="position">0</property>
                    <property name="name">TagName</property>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="position">1</property>
                    <property name="name">TagCount</property>
                    <property name="dataType">integer</property>
                </structure>
            </list-property>
            <list-property name="columnHints">
                <structure>
                    <property name="columnName">TagName</property>
                    <text-property name="displayName">Name</text-property>
                </structure>
                <structure>
                    <property name="columnName">TagCount</property>
                    <text-property name="displayName">Count</text-property>
                </structure>
            </list-property>
            <structure name="cachedMetaData">
                <list-property name="resultSet">
                    <structure>
                        <property name="position">1</property>
                        <property name="name">TagName</property>
                        <property name="dataType">string</property>
                    </structure>
                    <structure>
                        <property name="position">2</property>
                        <property name="name">TagCount</property>
                        <property name="dataType">integer</property>
                    </structure>
                </list-property>
            </structure>
            <property name="dataSource">By Query</property>
            <method name="open"><![CDATA[/*
	BIRT Data Sets generally expect to see the kinds of tables produced from SQL queries. Since the tags
	assigned to the topics are exposed as comma seperated lists, some processing has to be done
	to expose aggregate counts.
	
	This work could be done in the chart or table, but since getting a count of the tags assigned to the
	topics returned by the REST API is a fairly common use case, the TagSummary Data Set is provided
	to present this data. 
*/


Packages.java.lang.System.out.println("[START] TagSummary - open");
Packages.java.lang.System.out.println("Total number of topics: " + totalCount);

/*
	Globals used by other scripts
*/

// an array to save all the tag names we come across
tagNames = [];
// a map to associate the tag names to their frequency
tagCounts = {};
// a variable to keep track of how many of the rows in this secondary data set we have processed in the fetch script
currentTag = 0;

/*
	When the data set is opened we go through all the topics and count the instances
	of all their tags.
*/

for (var topicIndex = 0; topicIndex < totalCount; ++topicIndex)
{
	// a reference to the topic
	var topic = new Packages.com.actuate.json.JSONArrayIndex(topicIndex, "items");
	// how many tags this topic has assigned to it
	var tagCount = parseInt(controller.getValue("items", "item/tags/size", topicIndex));
	
	for (var tagIndex = 0; tagIndex < tagCount; ++tagIndex)
    {
		// a reference to the tag in the topic
		var topicTags = new Packages.com.actuate.json.JSONArrayIndex(tagIndex, "item/tags/items");
		// the tags name
		var tagName = controller.getValue([topic, topicTags], "item/name");
		
		// test to see if we have encountered this tag before
		var tagNameIndex = tagNames.customIndexOf(tagName);
		// if not, add it to the collections
		if (tagNameIndex == -1)
		{
			tagNames.push(tagName);
			tagCounts[tagName] = 1;
		}
		// if so, increment the counter
		else
		{
			tagCounts[tagName] = tagCounts[tagName] + 1;
		}
	}
}

Packages.java.lang.System.out.println("[END] TagSummary - open");]]></method>
            <method name="fetch"><![CDATA[if(currentTag < tagNames.length)
{    
    row["TagName"] = tagNames[currentTag];
    row["TagCount"] = tagCounts[tagNames[currentTag]];

	++currentTag;
    return true;
}

return false;]]></method>
        </script-data-set>
        <script-data-set name="TopicAndTag" id="9">
            <list-property name="resultSetHints">
                <structure>
                    <property name="position">1</property>
                    <property name="name">TopicID</property>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="position">2</property>
                    <property name="name">TopicTitle</property>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="position">3</property>
                    <property name="name">TopicTags</property>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="position">4</property>
                    <property name="name">TopicTagNames</property>
                    <property name="dataType">string</property>
                </structure>
            </list-property>
            <list-property name="columnHints">
                <structure>
                    <property name="columnName">TopicID</property>
                    <text-property name="displayName">ID</text-property>
                </structure>
                <structure>
                    <property name="columnName">TopicTitle</property>
                    <text-property name="displayName">Title</text-property>
                </structure>
                <structure>
                    <property name="columnName">TopicTags</property>
                    <text-property name="displayName">Tags</text-property>
                </structure>
                <structure>
                    <property name="columnName">TopicTagNames</property>
                    <text-property name="displayName">TagNames</text-property>
                </structure>
            </list-property>
            <structure name="cachedMetaData">
                <list-property name="resultSet">
                    <structure>
                        <property name="position">1</property>
                        <property name="name">TopicID</property>
                        <property name="dataType">string</property>
                    </structure>
                    <structure>
                        <property name="position">2</property>
                        <property name="name">TopicTitle</property>
                        <property name="dataType">string</property>
                    </structure>
                    <structure>
                        <property name="position">3</property>
                        <property name="name">TopicTags</property>
                        <property name="dataType">string</property>
                    </structure>
                    <structure>
                        <property name="position">4</property>
                        <property name="name">TopicTagNames</property>
                        <property name="dataType">string</property>
                    </structure>
                </list-property>
            </structure>
            <property name="dataSource">By Query</property>
            <method name="open"><![CDATA[/*
	Globals used by other scripts
*/

// This will track your current row later on
count = 0;]]></method>
            <method name="fetch"><![CDATA[if(count < totalCount)
{
    row["TopicID"] = controller.getValue("items", "item/id", count);
    row["TopicTitle"] = controller.getValue("items", "item/title", count);
    
    var tags = "";
    var tagNames = "";
    
    var topic = new Packages.com.actuate.json.JSONArrayIndex(count, "items");

	var tagCount = parseInt(controller.getValue("items", "item/tags/size", count));
    for (var i = 0; i < tagCount; ++i)
    {
    	if (tags != "")
    		tags += ",";
    	if (tagNames != "")
    		tagNames += ",";
    		
	    var topicTags = new Packages.com.actuate.json.JSONArrayIndex(i, "item/tags/items");

	    var tag = controller.getValue([topic, topicTags], "item/id");	    
	    tags += tag;
	    
	    var tagName = controller.getValue([topic, topicTags], "item/name");	    
	    tagNames += tagName;
    }
    
    row["TopicTags"] = tags;
    row["TopicTagNames"] = tagNames;

    count++;
    return true;
}

return false;]]></method>
        </script-data-set>
        <script-data-set name="SpecTopicAndTag" id="203">
            <list-property name="resultSetHints">
                <structure>
                    <property name="position">1</property>
                    <property name="name">SpecID</property>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="position">2</property>
                    <property name="name">TopicID</property>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="position">3</property>
                    <property name="name">TopicTitle</property>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="position">4</property>
                    <property name="name">TopicTag</property>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="position">5</property>
                    <property name="name">TopicTagID</property>
                    <property name="dataType">string</property>
                </structure>
            </list-property>
            <list-property name="columnHints">
                <structure>
                    <property name="columnName">SpecID</property>
                    <text-property name="displayName">Spec ID</text-property>
                </structure>
                <structure>
                    <property name="columnName">TopicID</property>
                    <text-property name="displayName">Topic ID</text-property>
                </structure>
                <structure>
                    <property name="columnName">TopicTitle</property>
                    <text-property name="displayName">Topic Title</text-property>
                </structure>
                <structure>
                    <property name="columnName">TopicTag</property>
                    <text-property name="displayName">Topic Tag</text-property>
                </structure>
                <structure>
                    <property name="columnName">TopicTagID</property>
                    <text-property name="displayName">Topic Tag ID</text-property>
                </structure>
            </list-property>
            <structure name="cachedMetaData">
                <list-property name="resultSet">
                    <structure>
                        <property name="position">1</property>
                        <property name="name">SpecID</property>
                        <property name="dataType">string</property>
                    </structure>
                    <structure>
                        <property name="position">2</property>
                        <property name="name">TopicID</property>
                        <property name="dataType">string</property>
                    </structure>
                    <structure>
                        <property name="position">3</property>
                        <property name="name">TopicTitle</property>
                        <property name="dataType">string</property>
                    </structure>
                    <structure>
                        <property name="position">4</property>
                        <property name="name">TopicTag</property>
                        <property name="dataType">string</property>
                    </structure>
                    <structure>
                        <property name="position">5</property>
                        <property name="name">TopicTagID</property>
                        <property name="dataType">string</property>
                    </structure>
                </list-property>
            </structure>
            <property name="dataSource">By Specs</property>
            <method name="open"><![CDATA[/*
	--------------------- Global variables ---------------------
*/

// specs mapped to topics
specTopics = [];

// This will track your current row later on
specTopicAndTagCount = 0;

// The tags in the filter category
specTopicAndTagFilter = [];

// The list of categories
categoryIdList = [];
categoryNameList = [];

/*
	--------------------- Processing ---------------------
*/

/*
	get the list of categories
*/

(function()
{
	if (categoryListController != null)
	{
		var tagCount = categoryController.getChildCount("items");
		
		for (var categoryIndex = 0; categoryIndex < tagCount; ++categoryIndex)
		{
			var id = categoryController.getValue("tags/items", "item/id", categoryIndex);
			var name = categoryController.getValue("tags/items", "item/name", categoryIndex);
			categoryIdList.push(id);
			categoryNameList.push(name);
		}
		
		Packages.java.lang.System.out.println("Number of filter tags found: " + specTopicAndTagFilter.length );
	}
})();

/*
	get the list of tags we are interested in processing
*/
(function()
{
	if (categoryController != null)
	{
		var tagCount = categoryController.getChildCount("tags/items");
		
		for (var tagIndex = 0; tagIndex < tagCount; ++tagIndex)
		{
			var tagId = categoryController.getValue("tags/items", "item/id", tagIndex);
			//var tagName = categoryController.getValue("tags/items", "item/name", tagIndex);
			specTopicAndTagFilter.push(tagId);
		}
		
		Packages.java.lang.System.out.println("Number of filter tags found: " + specTopicAndTagFilter.length );
	}
})();

// here we take the results of the queries against the spec ids
// and combine them into a single table

// use a function to limit variable scopes
(function()
{
	// process the results of each query against a spec
	for (var specIndex = 0; specIndex < controllerCSPIDs.length; ++specIndex)
	{		
		var controller = controllers[specIndex];
		var specId = controllerCSPIDs[specIndex];
		var controllerTopicCount = controller.getChildCount("items");
		
		// process the topics in each spec query
		for (var topicIndex = 0; topicIndex < controllerTopicCount; ++topicIndex)
		{
		    var topicId = controller.getValue("items", "item/id", topicIndex);
		    var topicTitle = controller.getValue("items", "item/title", topicIndex);
		    
		    var topic = new Packages.com.actuate.json.JSONArrayIndex(topicIndex, "items");
		
			var tagCount = parseInt(controller.getValue("items", "item/tags/size", topicIndex));
		    for (var i = 0; i < tagCount; ++i)
		    {
			    var topicTags = new Packages.com.actuate.json.JSONArrayIndex(i, "item/tags/items");
		
			    var tag = controller.getValue([topic, topicTags], "item/id");	    
			    			  
			    var tagName = controller.getValue([topic, topicTags], "item/name");	    
    		    // save the row
			    specTopics.push({specId: specId.toString(), topicId: topicId.toString(), topicTitle: topicTitle, topicTagName: tagName, topicTagID: tag});				
		    }
		}
	}
})();]]></method>
            <method name="fetch"><![CDATA[while (specTopicAndTagFilter.length != 0 &amp;&amp; specTopicAndTagCount < specTopics.length)
{
	// if the topic does not contain one of the filter tags, skip it
	if (specTopicAndTagFilter.customIndexOf(specTopics[specTopicAndTagCount].topicTagID) == -1)
	{
		Packages.java.lang.System.out.println("Skipping topic " + specTopics[specTopicAndTagCount].topicTagID + " " + (specTopicAndTagCount / specTopics.length * 100) + "%");
		++specTopicAndTagCount;
	}
	// otherwise proceed to adding the topic
	else	
	{
		break;
	}
}

if (specTopicAndTagCount < specTopics.length)
{
	Packages.java.lang.System.out.println("Adding topic " + specTopics[specTopicAndTagCount].topicTagID + " " + (specTopicAndTagCount / specTopics.length * 100) + "%");
	
	row["SpecID"] = specTopics[specTopicAndTagCount].specId;
	row["TopicID"] = specTopics[specTopicAndTagCount].topicId;
	row["TopicTitle"] = specTopics[specTopicAndTagCount].topicTitle;
	row["TopicTagID"] = specTopics[specTopicAndTagCount].topicTagID;
	row["TopicTag"] = specTopics[specTopicAndTagCount].topicTagName;
	
	++specTopicAndTagCount;
	return true;
}

return false;]]></method>
        </script-data-set>
    </data-sets>
    <themes>
        <theme name="defaultTheme" id="4"/>
    </themes>
    <page-setup>
        <simple-master-page name="NewSimpleMasterPage" id="3"/>
    </page-setup>
</library>
